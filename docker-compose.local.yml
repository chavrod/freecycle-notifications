volumes:
  pingcycle_local_postgres_data: {}
  pingcycle_local_postgres_data_backups: {}
  pingcycle_local_redis_data: {}

services:
  django: &django
    build:
      context: ./backend
      dockerfile: ./compose/local/Dockerfile
    image: pingcycle_local_django
    container_name: pingcycle_local_django
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app:z
      - /etc/pingcycle_config.json:/etc/pingcycle_config.json
    ports:
      - '8000:8000'
    command: /start

  postgres:
    image: postgres:16
    container_name: pingcycle_local_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      APP_DB: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pingcycle_local_postgres_data:/var/lib/postgresql/data
      - ./db-scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh

  redis:
    image: docker.io/redis:6
    container_name: pingcycle_local_redis
    volumes:
      - pingcycle_local_redis_data:/data

  celeryworker:
    <<: *django
    image: pingcycle_local_celeryworker
    container_name: pingcycle_local_celeryworker
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: pingcycle_local_celerybeat
    container_name: pingcycle_local_celerybeat
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celerybeat

  frontend:
    build: 
      context: ./frontend
      dockerfile: ./Dockerfile.dev
    container_name: "pingcycle_frontend"
    volumes:
      - ./frontend:/app
      - node-modules:/app/node_modules
    ports:
      - '3000:3000'
    environment:
      - VITE_ENV={FRONTEND_ENV}
      - VITE_API_URL={FRONTEND_API_URL}
      - VITE_TELEGRAM_BOT_USERNAME={FRONTEND_TELEGRAM_BOT_USERNAME}
      - VITE_SENTRY_DSN={FRONTEND_SENTRY_DSN}     
    depends_on:
      - "backend"
